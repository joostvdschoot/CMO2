/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  FOR CUSTOMIZE lessorBaseService PLEASE EDIT ../lessor.service.ts
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */
 // DEPENDENCIES
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';

// CONFIG
import { environment } from '../../../environments/environment';

// MODEL
import { Lessor } from '../../domain/cmo_db/lessor';

/**
 * THIS SERVICE MAKE HTTP REQUEST TO SERVER, FOR CUSTOMIZE IT EDIT ../Lessor.service.ts
 */

/*
 * SCHEMA DB Lessor
 *
	{
		Genesis: {
			type: 'String',
			required : true
		},
		Name: {
			type: 'String',
			required : true
		},
		Number: {
			type: 'String',
			required : true
		},
		Share: {
			type: 'Integer',
			required : true
		},
		Type: {
			type: 'String',
			required : true,
			enum : ["Athlon", "JV", "Label"]
		},
		//RELATIONS
		//EXTERNAL RELATIONS
		Country: {
			type: Schema.ObjectId,
			ref : "Lessor"
		},
		Lessor: {
			type: Schema.ObjectId,
			ref : "Account"
		},
		Lessor: {
			type: Schema.ObjectId,
			ref : "Organization"
		},
		OperatingEntity: {
			type: Schema.ObjectId,
			ref : "Lessor"
		},
	}
 *
 */
@Injectable()
export class LessorBaseService {

    contextUrl: string = environment.endpoint + '/lessor';
    constructor(
        protected http: HttpClient
        ) { }

    // CRUD METHODS

    /**
    * LessorService.list
    *   @description CRUD ACTION list
    *
    */
    list(): Observable<Lessor[]> {
        return this.http
            .get<Lessor[]>(this.contextUrl)
            .pipe(map(data => data));
    }


    // Custom APIs

}
